name: ElectrOS Build and Distribute RELEASE

on:
  push:
    branches:
      - 'main'

jobs:
  mac_x86_build:
    runs-on:
      mac-arm
    needs: [mac_arm_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # Use the latest 3.x version available

      - name: Install setuptools
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade setuptools

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: run mac build
        run: ./mac-scripts/x86-builder.sh

      - name: checksum sha calculation
        run: shasum -a 256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}.dmg > dist/ElectrOS-${{ env.ELECTROS_VERSION }}.sha256

      - name: checksum md5 calculation
        run: md5 dist/ElectrOS-${{ env.ELECTROS_VERSION }}.dmg > dist/ElectrOS-${{ env.ELECTROS_VERSION }}.md5
      
      - name: create archive
        run: zip dist/ElectrOS-${{ env.ELECTROS_VERSION }}.zip dist/ElectrOS-${{ env.ELECTROS_VERSION }}.dmg dist/ElectrOS-${{ env.ELECTROS_VERSION }}.sha256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}.md5

      - name: Push x86-Mac artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_intel.zip
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}.zip

  mac_arm_build:
    runs-on:
      mac-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # Use the latest 3.x version available
  
      - name: Install setuptools
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade setuptools

      - name: verify certificates
        run: |
          security find-identity -v -p codesigning

      - name: Run build
        run: ./mac-scripts/arm-builder.sh

      - name: checksum sha calculation
        run: shasum -a 256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.dmg > dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.sha256

      - name: checksum md5 calculation
        run: md5 dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.dmg > dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.md5

      - name: create archive
        run: zip dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.zip dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.dmg dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.sha256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.md5

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_arm.zip
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.zip

  linux_arm_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron:dist-linux-arm
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: AppImage checksum sha calculation
        run: sha256sum dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.AppImage > dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.sha256

      - name: deb checksum sha calculation
        run: sha256sum dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.deb > dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.sha256

      - name: AppImage checksum md5 calculation
        run: md5sum dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.AppImage > dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.md5

      - name: deb checksum md5 calculation
        run: md5sum dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.deb > dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.md5

      - name: create appImage archive
        run: tar -czvf dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.tar.gz dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.AppImage dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.sha256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.md5

      - name: create deb archive
        run: tar -czvf dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.tar.gz dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.deb dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.sha256 dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.md5

      - name: Push ARM-Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_arm.tar.gz
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.tar.gz

      - name: Push ARM-Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_arm_deb.tar.gz
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.tar.gz

  win_x86_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install needed packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-windows-x64
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: checksum sha calculation
        run: sha256sum dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe > dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.sha256

      - name: checksum md5 calculation
        run: md5sum dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe > dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.md5

      - name: create archive
        run: zip dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.sha256 dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.md5

      - name: Push Win artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_x86.zip
          path: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip

  win_arm_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install needed packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron:dist-windows-arm
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: checksum sha calculation
        run: sha256sum dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe > dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.sha256

      - name: checksum md5 calculation
        run: md5sum dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe > dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.md5

      - name: create archive
        run: zip dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.sha256 dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.md5

      - name: Push ARM-Win artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_arm_win.zip
          path: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip

  linux_x86_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-linux-x64
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: AppImage checksum sha calculation
        run: sha256sum dist/ElectrOS-${{ env.ELECTROS_VERSION }}.AppImage > dist/ElectrOS-${{ env.ELECTROS_VERSION }}.sha256

      - name: deb checksum sha calculation
        run: sha256sum dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb > dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.sha256

      - name: AppImage checksum md5 calculation
        run: md5sum dist/ElectrOS-${{ env.ELECTROS_VERSION }}.AppImage > dist/ElectrOS-${{ env.ELECTROS_VERSION }}.md5

      - name: deb checksum md5 calculation
        run: md5sum dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb > dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.md5

      - name: create appImage archive
        run: tar -czvf dist/ElectrOS-${{ env.ELECTROS_VERSION }}.tar.gz dist/ElectrOS-${{ env.ELECTROS_VERSION }}.AppImage dist/ElectrOS-${{ env.ELECTROS_VERSION }}.sha256 dist/ElectrOS-${{ env.ELECTROS_VERSION }}.md5

      - name: create deb archive
        run: tar -czvf dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.tar.gz dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.sha256 dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.md5

      - name: Push Linux appImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_amd64.tar.gz
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}.tar.gz

      - name: Push Linux deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: Elemento_Cloud_App_amd64_deb.tar.gz
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.tar.gz

  release:
    needs: [mac_arm_build, mac_x86_build, win_x86_build, linux_x86_build, linux_arm_build, win_arm_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Gather Win x86 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_x86.zip
          path: ./artifacts

      - name: rename win x86 artifact
        run: mv ./artifacts/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip ./artifacts/ElectrOS_Setup_x86.zip

      - name: Gather Win arm Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_arm_win.zip
          path: ./artifacts

      - name: rename win arm artifact
        run: mv ./artifacts/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.zip ./artifacts/ElectrOS_Setup_arm_win.zip

      - name: Gather Mac_x86 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_intel.zip
          path: ./artifacts

      - name: Gather Mac_ARM Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_arm.zip
          path: ./artifacts

      - name: Gather Linux x86 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_amd64.tar.gz
          path: ./artifacts

      - name: Gather Linux x86 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_amd64_deb.tar.gz
          path: ./artifacts

      - name: Gather Linux arm Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_arm.tar.gz
          path: ./artifacts

      - name: Gather Linux arm Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Elemento_Cloud_App_arm_deb.tar.gz
          path: ./artifacts

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Create changelog file
        id: changelog
        run: echo "$(cat changelog.md | tail -n +2 | awk '/^# / {exit} {print}')" > changelog_cleaned.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.ELECTROS_VERSION }} # --> using version for stable build
          release_name: ElectrOS app by Elemento @ v${{ env.ELECTROS_VERSION }}
          body_path: changelog_cleaned.md
          draft: false
          prerelease: false

      - name: Upload Win x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS_Setup_x86.zip
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_x86_win.zip
          asset_content_type: application/octet-stream

      - name: Upload Win arm to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS_Setup_arm_win.zip
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_arm_win.zip
          asset_content_type: application/octet-stream

      - name: Upload Mac_x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS-${{ env.ELECTROS_VERSION }}.zip
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_x86_mac.zip
          asset_content_type: application/octet-stream

      - name: Upload Mac_ARM to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.zip
          asset_name: EElectrOS_app_v${{ env.ELECTROS_VERSION }}_arm_mac.zip
          asset_content_type: application/octet-stream

      - name: Upload Linux x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS-${{ env.ELECTROS_VERSION }}.tar.gz
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_x86.tar.gz
          asset_content_type: application/octet-stream
      
      - name: Upload Linux x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/electr-os_${{ env.ELECTROS_VERSION }}_amd64_deb.tar.gz
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_x86_deb.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload Linux arm to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.tar.gz
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_arm.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload Linux arm to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/electr-os_${{ env.ELECTROS_VERSION }}_arm64_deb.tar.gz
          asset_name: ElectrOS_app_v${{ env.ELECTROS_VERSION }}_arm_deb.tar.gz
          asset_content_type: application/octet-stream
