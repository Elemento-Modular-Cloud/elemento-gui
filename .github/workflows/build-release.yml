name: ElectrOS Build and Distribute RELEASE

on:
  pull_request_review:
    types: [submitted]

jobs:
  mac_x86_build:
    if: ${{ github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'main' }}
    runs-on:
      macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Decode and Install macOS certificates
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P ${{ secrets.MAC_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron-forge:make-macos-intel && electron-forge:intel-installer-dmg
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push x86-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_intel.dmg
          path: electrOS-x64.dmg

      # - name: Push Executable
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/electron/ElectrOS-darwin-x64
      #     target:

  mac_arm_build:
    if: ${{ github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'main' }}
    runs-on:
      macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Decode and Install macOS certificates
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P ${{ secrets.MAC_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron-forge:make-macos-arm && electron-forge:arm-installer-dmg
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.dmg
          path: electrOS-arm64.dmg

      # - name: Push Executable
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/electron/ElectrOS-darwin-x64
      #     target:

  linux_arm_build:
    if: ${{ github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'main' }}
    runs-on:
      macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Decode and Install macOS certificates
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P ${{ secrets.MAC_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron:dist-linux
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.AppImage
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}-arm64.AppImage

      # - name: Push Executable
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/electron/ElectrOS-darwin-x6
      #     target:

  win_build:
    if: ${{ github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'main' }}
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install needed packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-windows
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push Win artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App.exe
          path: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe

      # - name: Push Executable to prod
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe
      #     target:

  linux_x86_build:
    if: ${{ github.event.review.state == 'approved' && github.event.pull_request.base.ref == 'main' }}
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-linux
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push Linux appImage artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App.AppImage
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}.AppImage

      - name: Push Linux deb artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App.deb
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb

      # - name: Push Executable deb to prod
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb
      #     target:

      # - name: Push Executable appImage to prod
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.SCP_HOST }}
      #     username: ${{ secrets.SCP_USER }}
      #     key: ${{ secrets.SCP_KEY }}
      #     source: dist/electr-os_${{ env.ELECTROS_VERSION }}.AppImage
      #     target:

  release:
    needs: [mac_arm_build, mac_x86_build, win_build, linux_x86_build, linux_arm_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: main

      - name: Gather Win Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App.exe
          path: ./artifacts

      - name: Gather Mac_x86 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_intel.dmg
          path: ./artifacts

      - name: Gather Mac_ARM Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App.dmg
          path: ./artifacts

      - name: Gather Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App.AppImage
          path: ./artifacts

      - name: Gather Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App.deb
          path: ./artifacts

      - name: Gather Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.AppImage
          path: ./artifacts

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d-%H-%M-%S')" >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.ELECTROS_VERSION }} # --> using version for stable build
          release_name: Elemento Web App @ v${{ env.ELECTROS_VERSION }}
          body: |
            Executables of ElectrOS
          draft: false
          prerelease: false

      - name: Upload Win to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App.exe
          asset_name: Elemento_Cloud_App.exe
          asset_content_type: application/octet-stream

      - name: Upload Mac_x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_intel.dmg
          asset_name: Elemento_Cloud_App_intel.dmg
          asset_content_type: application/octet-stream

      - name: Upload Mac_ARM to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App.dmg
          asset_name: Elemento_Cloud_App.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App.AppImage
          asset_name: Elemento_Cloud_App.AppImage
          asset_content_type: application/octet-stream
      
      - name: Upload Linux to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App.deb
          asset_name: Elemento_Cloud_App.deb
          asset_content_type: application/octet-stream

      - name: Upload Linux to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_arm.AppImage
          asset_name: Elemento_Cloud_App_arm.AppImage
          asset_content_type: application/octet-stream