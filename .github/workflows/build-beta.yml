name: ElectrOS Build and Distribute BETA

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'

jobs:
  mac_x86_build:
    runs-on:
      macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install lib for macOS
        uses: borales/actions-yarn@v4
        with:
          cmd: install appdmg

      - name: Decode and install macOS certificate
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > macos_cert.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import macos_cert.p12 -k build.keychain -P "${{ secrets.MAC_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning
  
      - name: Verify Keychain Contents
        run: |
          security list-keychains
          security show-keychain-info build.keychain
          security find-identity -v -p codesigning

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron-forge:make-macos-intel
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Create DMG
        uses: borales/actions-yarn@v4
        with:
          cmd: electron-forge:intel-installer-dmg
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: see filesystem
        run: |
          ls -lah

      - name: see out folder
        run:
          ls -lah out/

      - name: see out make folder
        run:
          ls -lah out/make/zip/darwin/x64

      - name: see electros folder
        run:
          ls -lah out/ElectrOS-darwin-x64

      - name: Push x86-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_intel.dmg
          path: out/electrOS-x64.dmg

  mac_arm_build:
    runs-on:
      macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install lib for macOS
        uses: borales/actions-yarn@v4
        with:
          cmd: add appdmg

      - name: Decode and install macOS certificate
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > macos_cert.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import macos_cert.p12 -k build.keychain -P "${{ secrets.MAC_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning
    
      - name: Verify Keychain Contents
        run: |
          security list-keychains
          security show-keychain-info build.keychain
          security find-identity -v -p codesigning

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron-forge:make-macos-arm
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Create DMG
        uses: borales/actions-yarn@v4
        with:
          cmd: electron-forge:arm-installer-dmg
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}


      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.dmg
          path: out/electrOS-arm64.dmg

  linux_arm_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron:dist-linux-arm
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.AppImage
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}-arm64.AppImage

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.deb
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}_arm64.deb

  win_x86_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install needed packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-windows-x64
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push Win artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_x86.exe
          path: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe

  win_arm_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Install needed packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: | 
            electron:dist-windows-arm
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push ARM-Mac artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.exe
          path: dist/ElectrOS\ Setup\ ${{ env.ELECTROS_VERSION }}.exe

  linux_x86_build:
    runs-on:
      ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Get Node Version
        run: |
          NODEVERSION=$(cat .nvmrc | cut -d 'v' -f 2)
          echo "NODEVERSION=$(echo $NODEVERSION)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Build ElectrOS
        uses: borales/actions-yarn@v4
        with:
          cmd: build

      - name: Create Executable
        uses: borales/actions-yarn@v4
        with:
          cmd: electron:dist-linux-x64
        env:
          GH_TOKEN: ${{ secrets.REPO_KEY }}

      - name: Push Linux appImage artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_amd64.AppImage
          path: dist/ElectrOS-${{ env.ELECTROS_VERSION }}.AppImage

      - name: Push Linux deb artifact
        uses: actions/upload-artifact@v2
        with:
          name: Elemento_Cloud_App_amd64.deb
          path: dist/electr-os_${{ env.ELECTROS_VERSION }}_amd64.deb

  release:
    needs: [mac_arm_build, mac_x86_build, win_x86_build, linux_x86_build, linux_arm_build, win_arm_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_KEY }}
          submodules: recursive
          ref: develop

      - name: Gather Win x86 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_x86.exe
          path: ./artifacts

      - name: Gather Win arm Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.exe
          path: ./artifacts

      - name: Gather Mac_x86 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_intel.dmg
          path: ./artifacts

      - name: Gather Mac_ARM Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App.dmg
          path: ./artifacts

      - name: Gather Linux x86 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_amd64.AppImage
          path: ./artifacts

      - name: Gather Linux x86 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_amd64.deb
          path: ./artifacts

      - name: Gather Linux arm Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.AppImage
          path: ./artifacts

      - name: Gather Linux arm Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Elemento_Cloud_App_arm.deb
          path: ./artifacts

      - name: Electros Version
        run: |
          ELECTROS_VERSION=$( cat package.json | grep '"version":' | cut -d '"' -f 4 )
          echo "ELECTROS_VERSION=$(echo $ELECTROS_VERSION)" >> $GITHUB_ENV

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d-%H-%M-%S')" >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }} # --> using date for alpha build
          #tag_name: v${{ env.ELECTROS_VERSION }} # --> using version for stable build
          release_name: Elemento Web App @ v${{ env.ELECTROS_VERSION }}
          body: |
            Executables of ElectrOS
          draft: false
          prerelease: false

      - name: Upload Win x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_x86.exe
          asset_name: Elemento_Cloud_App_x86.exe
          asset_content_type: application/octet-stream

      - name: Upload Mac_x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_intel.dmg
          asset_name: Elemento_Cloud_App_intel.dmg
          asset_content_type: application/octet-stream

      - name: Upload Mac_ARM to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App.dmg
          asset_name: Elemento_Cloud_App.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_amd64.AppImage
          asset_name: Elemento_Cloud_App_amd64.AppImage
          asset_content_type: application/octet-stream
      
      - name: Upload Linux x86 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_amd64.deb
          asset_name: Elemento_Cloud_App_amd64.deb
          asset_content_type: application/octet-stream

      - name: Upload Linux arm to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_arm.AppImage
          asset_name: Elemento_Cloud_App_arm.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux arm to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Elemento_Cloud_App_arm.deb
          asset_name: Elemento_Cloud_App_arm.deb
          asset_content_type: application/octet-stream

      # - name: Push to Prod
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.REPO_IP }}
      #     username: github
      #     key: ${{ secrets.SSH_KEY }}
      #     source: ./artifacts
      #     target: /home/github/

      # - name: Move to correct position
      #   uses: appleboy/ssh-action@
      #   with:
      #     host: ${{ secrets.REPO_IP }}
      #     username: github
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       echo ${{secrets.REPO_SUDO_PW }} | sudo -S mv /home/github/* /mnt/repository/electron/